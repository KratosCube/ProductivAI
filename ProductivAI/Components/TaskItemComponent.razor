@using ProductivAI.Core.Models

<div class="task-item @(Task.IsCompleted ? "completed" : "")">
    <div class="task-main">
        <div class="task-checkbox">
            <input type="checkbox" checked="@Task.IsCompleted" @onchange="HandleComplete" />
        </div>

        <div class="task-content" @onclick="HandleEdit">
            <div class="task-title">
                @Task.Title
                @if (Task.IsRecurring)
                {
                        <span class="recurring-badge" title="Recurring task">
                            <span class="oi oi-loop-circular"></span>
                        </span>
                }
            </div>

            @if (!string.IsNullOrEmpty(Task.Description))
            {
                    <div class="task-description">@Task.Description</div>
            }

            <div class="task-metadata">
                @if (Task.DueDate.HasValue)
                {
                        <span class="due-date @(IsOverdue(Task) ? "overdue" : "")">
                            <span class="oi oi-calendar"></span>
                        @Task.DueDate.Value.ToShortDateString()
                        </span>
                }

                <span class="priority priority-@Task.Priority">
                    <span class="oi oi-flag"></span>
                    Priority @Task.Priority
                </span>
            </div>
        </div>
    </div>

    @if (Task.SubTasks.Any())
    {
            <div class="subtasks">
            @foreach (var subtask in Task.SubTasks)
            {
                        <div class="subtask @(subtask.IsCompleted ? "completed" : "")">
                            <div class="subtask-checkbox">
                                <input type="checkbox" checked="@subtask.IsCompleted" @onchange="e => HandleSubtaskComplete(subtask, e)" />
                            </div>
                            <div class="subtask-description">
                        @subtask.Description
                            </div>
                        </div>
            }
            </div>
    }
</div>

@code {
    [Parameter]
    public TaskItem Task { get; set; }

    [Parameter]
    public EventCallback<TaskItem> OnComplete { get; set; }

    [Parameter]
    public EventCallback<TaskItem> OnEdit { get; set; }

    [Parameter]
    public EventCallback<TaskItem> OnAddSubtask { get; set; }

    private bool IsOverdue(TaskItem task)
    {
        return task.DueDate.HasValue && task.DueDate.Value < DateTime.Today;
    }

    private async Task HandleComplete()
    {
        await OnComplete.InvokeAsync(Task);
    }

    private async Task HandleEdit()
    {
        await OnEdit.InvokeAsync(Task);
    }

    private async Task HandleAddSubtask()
    {
        await OnAddSubtask.InvokeAsync(Task);
    }

    private async Task HandleSubtaskComplete(SubTask subtask, ChangeEventArgs e)
    {
        // This would be handled by a service call in a real implementation
        subtask.IsCompleted = (bool)e.Value;
    }
}