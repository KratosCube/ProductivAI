@page "/tasks"
@using ProductivAI.Core.Models
@using ProductivAI.Core.Interfaces
@using ProductivAI.Application.Services
@using System.Threading
@inject ITaskService TaskService
@inject ITaskRepository TaskRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="task-management">
    <div class="task-header bg-white rounded-lg shadow-sm p-4">
        <h2 class="text-xl font-semibold">Tasks</h2>
        <div class="task-actions">
            <button class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded flex items-center gap-2" @onclick="ShowNewTaskModal">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                New Task
            </button>
            <select class="border rounded px-3 py-2" @bind="currentSortOption" @bind:after="SortTasksAsync">
                <option value="DueDate">Sort by Due Date</option>
                <option value="Priority">Sort by Priority</option>
                <option value="CreationDate">Sort by Creation Date</option>
            </select>
            <button class="border rounded px-4 py-2 hover:bg-gray-50" @onclick='() => NavigationManager.NavigateTo("/completed")'>
                <span class="oi oi-check"></span> View Completed
            </button>
        </div>
    </div>

    @if (loading)
    {
            <div class="flex flex-col items-center justify-center p-12">
                <div class="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                <span class="mt-4 text-gray-500">Loading tasks...</span>
            </div>
    }
    else if (tasks == null || !tasks.Any())
    {
            <div class="empty-chat bg-white rounded-lg shadow-sm">
                <div class="empty-chat-icon">
                    <span class="oi oi-task"></span>
                </div>
                <h3 class="text-xl font-medium mb-2">No tasks yet</h3>
                <p class="text-gray-500 text-center max-w-md mb-6">Create your first task to get started on your productivity journey.</p>
                <button class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded" @onclick="ShowNewTaskModal">Create Task</button>
            </div>
    }
    else
    {
            <div class="task-list mt-6">
            @if (overdueTasks.Any())
            {
                        <div class="mb-6">
                            <h4 class="text-red-600 font-medium mb-2">Overdue</h4>
                    @foreach (var task in overdueTasks)
                    {
                                    <TaskItemComponent Task="task" 
                                              OnComplete="CompleteTaskAsync" 
                                              OnEdit="EditTask" 
                                              OnAddSubtask="ShowAddSubtaskModal" />
                    }
                        </div>
            }

                <div>
                    <h4 class="font-medium mb-2">Tasks</h4>
                @foreach (var task in regularTasks)
                {
                            <TaskItemComponent Task="task" 
                                      OnComplete="CompleteTaskAsync" 
                                      OnEdit="EditTask" 
                                      OnAddSubtask="ShowAddSubtaskModal" />
                }
                </div>
            </div>
    }

    @if (showNewTaskModal)
    {
            <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h5 class="text-lg font-semibold">@(editingTask ? "Edit Task" : "New Task")</h5>
                        <button class="text-gray-500 hover:text-gray-700" @onclick="HideModal">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                        </button>
                    </div>

                    <EditForm Model="newTask" OnValidSubmit="SaveTaskAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-4">
                            <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Title</label>
                            <InputText id="title" class="w-full border rounded px-3 py-2" @bind-Value="newTask.Title" />
                        </div>

                        <div class="mb-4">
                            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                            <InputTextArea id="description" class="w-full border rounded px-3 py-2" @bind-Value="newTask.Description" rows="3" />
                        </div>

                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="dueDate" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
                                <InputDate id="dueDate" class="w-full border rounded px-3 py-2" @bind-Value="newTask.DueDate" />
                            </div>
                            <div>
                                <label for="priority" class="block text-sm font-medium text-gray-700 mb-1">Priority (1-5)</label>
                                <InputNumber id="priority" class="w-full border rounded px-3 py-2" @bind-Value="newTask.Priority" min="1" max="5" />
                            </div>
                        </div>

                        <div class="mb-4 flex items-center">
                            <InputCheckbox id="isRecurring" class="mr-2" @bind-Value="newTask.IsRecurring" />
                            <label for="isRecurring" class="text-sm text-gray-700">Recurring Task</label>
                        </div>

                    @if (newTask.IsRecurring)
                    {
                                <div class="mb-4">
                                    <label for="recurrencePattern" class="block text-sm font-medium text-gray-700 mb-1">Recurrence Pattern</label>
                                    <InputSelect id="recurrencePattern" class="w-full border rounded px-3 py-2" @bind-Value="newTask.RecurrencePattern">
                                        <option value="daily">Daily</option>
                                        <option value="weekly">Weekly</option>
                                        <option value="monthly">Monthly</option>
                                        <option value="yearly">Yearly</option>
                                        <option value="every 2 days">Every 2 Days</option>
                                        <option value="every 2 weeks">Every 2 Weeks</option>
                                    </InputSelect>
                                </div>
                    }

                        <div class="flex justify-end gap-2 mt-6">
                            <button type="button" class="px-4 py-2 border rounded hover:bg-gray-50" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
    }

    @if (showSubtaskModal)
    {
            <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
                    <div class="flex justify-between items-center mb-4">
                        <h5 class="text-lg font-semibold">Add Subtask</h5>
                        <button class="text-gray-500 hover:text-gray-700" @onclick="HideModal">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                        </button>
                    </div>

                    <div class="mb-4">
                        <label for="subtaskDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <input id="subtaskDescription" class="w-full border rounded px-3 py-2" @bind="newSubtaskDescription" />
                    </div>

                    <div class="flex justify-end gap-2 mt-6">
                        <button class="px-4 py-2 border rounded hover:bg-gray-50" @onclick="HideModal">Cancel</button>
                        <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" @onclick="AddSubtaskAsync">Add</button>
                    </div>
                </div>
            </div>
    }
</div>

@code {
    private List<TaskItem> tasks;
    private List<TaskItem> overdueTasks = new List<TaskItem>();
    private List<TaskItem> regularTasks = new List<TaskItem>();
    private TaskItem newTask = new TaskItem();
    private TaskItem currentTask;
    private string newSubtaskDescription;
    private bool loading = true;
    private bool showNewTaskModal = false;
    private bool showSubtaskModal = false;
    private bool editingTask = false;
    private string currentSortOption = "DueDate";
    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasksAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register keyboard shortcuts
            await JSRuntime.InvokeVoidAsync("productivAIInterop.registerShortcuts",
                DotNetObjectReference.Create(this));
        }
    }

    public void Dispose()
    {
        cts?.Cancel();
        cts?.Dispose();
    }

    private async Task LoadTasksAsync()
    {
        loading = true;
        StateHasChanged();

        try
        {
            // Get active tasks
            var activeTasks = await TaskService.GetActiveTasksAsync();
            tasks = activeTasks.ToList();

            // Split into overdue and regular tasks
            DateTime today = DateTime.Today;
            overdueTasks = tasks
                .Where(t => t.DueDate.HasValue && t.DueDate.Value < today)
                .ToList();

            regularTasks = tasks
                .Where(t => !t.DueDate.HasValue || t.DueDate.Value >= today)
                .ToList();

            // Apply current sort
            await SortTasksAsync();
        }
        catch (Exception ex)
        {
            // Handle error - could add a UI component to show error messages
            Console.Error.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task SortTasksAsync()
    {
        // Using ProductivAI.Core.Models.TaskSortPreference directly
        var sortPreference = ProductivAI.Core.Models.TaskSortPreference.DueDate;
        Enum.TryParse(currentSortOption, out sortPreference);

        // Sort overdue tasks
        overdueTasks = sortPreference switch
        {
            ProductivAI.Core.Models.TaskSortPreference.DueDate => overdueTasks
                .OrderBy(t => t.DueDate.HasValue ? t.DueDate.Value : DateTime.MaxValue)
                .ToList(),
            ProductivAI.Core.Models.TaskSortPreference.Priority => overdueTasks
                .OrderByDescending(t => t.Priority)
                .ToList(),
            ProductivAI.Core.Models.TaskSortPreference.CreationDate => overdueTasks
                .OrderBy(t => t.CreatedDate)
                .ToList(),
            _ => overdueTasks
        };

        // Sort regular tasks
        regularTasks = sortPreference switch
        {
            ProductivAI.Core.Models.TaskSortPreference.DueDate => regularTasks
                .OrderBy(t => t.DueDate.HasValue ? t.DueDate.Value : DateTime.MaxValue)
                .ToList(),
            ProductivAI.Core.Models.TaskSortPreference.Priority => regularTasks
                .OrderByDescending(t => t.Priority)
                .ToList(),
            ProductivAI.Core.Models.TaskSortPreference.CreationDate => regularTasks
                .OrderBy(t => t.CreatedDate)
                .ToList(),
            _ => regularTasks
        };

        StateHasChanged();
    }

    private void ShowNewTaskModal()
    {
        newTask = new TaskItem
            {
                Priority = 3 // Default priority
            };
        editingTask = false;
        showNewTaskModal = true;
    }

    private void EditTask(TaskItem task)
    {
        newTask = new TaskItem
            {
                Id = task.Id,
                Title = task.Title,
                Description = task.Description,
                DueDate = task.DueDate,
                Priority = task.Priority,
                IsRecurring = task.IsRecurring,
                RecurrencePattern = task.RecurrencePattern,
                CreatedDate = task.CreatedDate,
                SubTasks = task.SubTasks
            };
        editingTask = true;
        showNewTaskModal = true;
    }

    private void ShowAddSubtaskModal(TaskItem task)
    {
        currentTask = task;
        newSubtaskDescription = string.Empty;
        showSubtaskModal = true;
    }

    private void HideModal()
    {
        showNewTaskModal = false;
        showSubtaskModal = false;
    }

    private async Task SaveTaskAsync()
    {
        try
        {
            if (editingTask)
            {
                await TaskService.UpdateTaskAsync(newTask);
            }
            else
            {
                await TaskService.CreateTaskAsync(
                    newTask.Title,
                    newTask.Description,
                    newTask.DueDate,
                    newTask.Priority
                );
            }

            HideModal();
            await LoadTasksAsync();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error saving task: {ex.Message}");
        }
    }

    private async Task AddSubtaskAsync()
    {
        if (string.IsNullOrWhiteSpace(newSubtaskDescription))
            return;

        try
        {
            await TaskService.AddSubTaskAsync(currentTask.Id, newSubtaskDescription);
            HideModal();
            await LoadTasksAsync();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error adding subtask: {ex.Message}");
        }
    }

    private async Task CompleteTaskAsync(TaskItem task)
    {
        try
        {
            await TaskService.CompleteTaskAsync(task.Id);
            await LoadTasksAsync();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error completing task: {ex.Message}");
        }
    }

    [JSInvokable]
    public void HandleQuickCreateShortcut()
    {
        ShowNewTaskModal();
        StateHasChanged();
    }

    [JSInvokable]
    public void HandleSettingsShortcut()
    {
        NavigationManager.NavigateTo("/settings");
    }

    [JSInvokable]
    public void HandleCompletedTasksShortcut()
    {
        NavigationManager.NavigateTo("/completed");
    }
}