@using ProductivAI.Application.Services
@using ProductivAI.Core.Models
@inject ITaskService TaskService
@inject IJSRuntime JSRuntime

<div class="task-edit-suggestion-block">
    <div class="task-action-header">
        <span class="task-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>
        </span>
        <span>Task Edit Suggestion</span>
    </div>
    <div class="task-action-content">
        @if (isLoading)
        {
                <p>Loading tasks...</p>
        }
        else if (selectedTask != null)
        {
                <p>I suggest the following changes to task "@selectedTask.Title":</p>
                <h4>@EditedTask.Title</h4>
            @if (!string.IsNullOrEmpty(EditedTask.Description))
            {
                        <p class="task-description">@EditedTask.Description</p>
            }
            @if (EditedTask.DueDate.HasValue)
            {
                        <p>Due: @EditedTask.DueDate.Value.ToShortDateString()</p>
            }
                <div class="task-priority">
                    <span class="priority-label">Priority:</span>
                    <span class="priority-value @PriorityClass">@EditedTask.Priority</span>
                </div>
        }
        else
        {
                <p>Please select a task to apply these changes to:</p>
                <div class="task-select-container">
                    <select @bind="selectedTaskId" class="form-select">
                        <option value="">-- Select a task --</option>
                    @foreach (var task in availableTasks)
                    {
                                <option value="@task.Id">@task.Title</option>
                    }
                    </select>
                </div>
                <div class="task-edit-details">
                    <h4>Suggested changes:</h4>
                    <p><strong>Title:</strong> @EditedTask.Title</p>
                @if (!string.IsNullOrEmpty(EditedTask.Description))
                {
                            <p><strong>Description:</strong> @EditedTask.Description</p>
                }
                @if (EditedTask.DueDate.HasValue)
                {
                            <p><strong>Due Date:</strong> @EditedTask.DueDate.Value.ToShortDateString()</p>
                }
                    <p><strong>Priority:</strong> @EditedTask.Priority</p>
                @if (EditedTask.SubTasks.Any())
                {
                            <p><strong>Subtasks:</strong></p>
                            <ul>
                        @foreach (var subtask in EditedTask.SubTasks)
                        {
                                        <li>@subtask.Description</li>
                        }
                            </ul>
                }
                </div>
        }
    </div>
    <div class="task-action-buttons">
        @if (selectedTask != null)
        {
                <button class="task-action-button" @onclick="ShowComparisonModal">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>
                    Review Changes
                </button>
        }
        else
        {
                <button class="task-action-button" @onclick="SelectTask" disabled="@string.IsNullOrEmpty(selectedTaskId)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>
                    Select Task
                </button>
        }
    </div>
</div>

@code {
    [Parameter] public string OriginalId { get; set; }
    [Parameter] public TaskItem EditedTask { get; set; }
    [Parameter] public EventCallback<(TaskItem Original, TaskItem Edited)> OnShowModal { get; set; }

    private List<TaskItem> availableTasks = new List<TaskItem>();
    private string selectedTaskId = "";
    private TaskItem selectedTask = null;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Load available tasks
        try
        {
            var tasks = await TaskService.GetActiveTasksAsync();
            availableTasks = tasks.ToList();

            // If we have a valid GUID, attempt to select that task
            if (Guid.TryParse(OriginalId, out Guid taskId) &&
                OriginalId != "task-guid-here") // Skip placeholder
            {
                var task = availableTasks.FirstOrDefault(t => t.Id == taskId);
                if (task != null)
                {
                    selectedTaskId = taskId.ToString();
                    selectedTask = task;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string PriorityClass => EditedTask.Priority switch
    {
        1 => "priority-low",
        2 => "priority-low",
        3 => "priority-medium",
        4 => "priority-high",
        5 => "priority-high",
        _ => "priority-medium"
    };

    private async Task SelectTask()
    {
        if (!string.IsNullOrEmpty(selectedTaskId) && Guid.TryParse(selectedTaskId, out Guid taskId))
        {
            selectedTask = availableTasks.FirstOrDefault(t => t.Id.ToString() == selectedTaskId);
            StateHasChanged();
        }
    }

    private async Task ShowComparisonModal()
    {
        if (selectedTask != null)
        {
            await OnShowModal.InvokeAsync((selectedTask, EditedTask));
        }
    }
}