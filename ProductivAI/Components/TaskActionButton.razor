@using ProductivAI.Core.Models
@inject IJSRuntime JSRuntime

<div class="task-action-container">
    <div class="task-action-header">
        <span class="task-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>
        </span>
        <span>Task Suggestion</span>
    </div>
    <div class="task-action-content">
        <h4>@TaskTitle</h4>
        @if (Priority > 0)
        {
                <div class="task-priority">
                    <span class="priority-label">Priority:</span>
                    <span class="priority-value @PriorityClass">@Priority</span>
                </div>
        }
        @if (!string.IsNullOrEmpty(Description))
        {
                <p class="task-description">@Description</p>
        }
    </div>
    <button class="task-action-button" @onclick="CreateTaskAsync">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 5v14M5 12h14"></path></svg>
        Create Task
    </button>
</div>

@code {
    [Parameter] public string TaskTitle { get; set; }
    [Parameter] public string Description { get; set; }
    [Parameter] public int Priority { get; set; }
    [Parameter] public DateTime? DueDate { get; set; }
    [Parameter] public List<string> Subtasks { get; set; } = new List<string>();
    [Parameter] public EventCallback<TaskItem> OnTaskCreated { get; set; }

    private string PriorityClass => Priority switch
    {
        1 => "priority-low",
        2 => "priority-low",
        3 => "priority-medium",
        4 => "priority-high",
        5 => "priority-high",
        _ => "priority-medium"
    };

    private async Task CreateTaskAsync()
    {
        // Create the task object
        var task = new TaskItem
            {
                Title = TaskTitle,
                Description = Description,
                Priority = Priority,
                DueDate = DueDate,
                SubTasks = Subtasks?.Select(s => new SubTask
                {
                    Description = s,
                    IsCompleted = false
                }).ToList() ?? new List<SubTask>()
            };

        // Notify parent
        await OnTaskCreated.InvokeAsync(task);
    }
}