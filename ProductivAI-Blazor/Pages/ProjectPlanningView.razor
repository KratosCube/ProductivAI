@page "/project-planning"
@inject NavigationManager NavigationManager
@inject ProductivAI_Blazor.Services.ProjectService ProjectService
@inject ProductivAI_Blazor.Services.TaskService TaskService
@inject ProductivAI_Blazor.Services.TaskModalService TaskModalService
@inject ProductivAI_Blazor.Services.NavigationStateService NavStateService
@inject IJSRuntime JSRuntime
@inject ILogger<ProjectPlanningView> Logger
@using ProductivAI_Blazor.Models
@using System.Linq
@implements IAsyncDisposable

<PageTitle>Project Planning - ProductivAI</PageTitle>

<div class="bg-dark-panel rounded-lg p-8 shadow-lg border border-dark-border h-full flex flex-col">
    <!-- Header -->
    <div class="flex justify-between items-center mb-6 border-b border-dark-border pb-3 flex-shrink-0">
        @if (_selectedProject == null)
        {
            <h2 class="text-lg font-semibold text-dark-text-primary">Projects</h2>
        }
        else
        {
            <h2 class="text-lg font-semibold text-dark-text-primary">@_selectedProject.Name</h2>
        }
        <!-- Button in header can be used for global actions if needed later -->
    </div>

    <!-- Content Area -->
    <div class="flex-grow overflow-y-auto">
        @if (_selectedProject == null)
        {
            <!-- Project Management Section (No top border here) -->
            <div class="pt-0">  <!-- Removed border-t and adjusted pt-4 to pt-0 or similar if needed -->
                @if (_isLoadingProjects)
                {
                    <p class="text-sm text-dark-text-secondary">Loading projects...</p>
                }
                else if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <p class="text-sm text-red-500">Error: @_errorMessage</p>
                }
                else
                {
                    @if (_projectToEdit == null)
                    {
                        <!-- Add Project Form -->
                        <EditForm Model="@_newProject" OnValidSubmit="HandleAddProject" class="space-y-3 mb-4 p-3 border border-dark-accent rounded-md" Context="AddProjectForm">
                            <DataAnnotationsValidator />
                            <h4 class="text-md font-medium text-dark-text-primary mb-3">Add New Project</h4>
                            <div>
                                <label for="new-project-name" class="block text-xs font-medium text-dark-text-secondary">Project Name</label>
                                <InputText id="new-project-name" @bind-Value="@_newProject.Name" class="mt-1 w-full bg-dark-input border-dark-border rounded-md px-3 py-1.5 text-sm focus:ring-blue-500 focus:border-blue-500" placeholder="New project name" />
                                <ValidationMessage For="@(() => _newProject.Name)" />
                            </div>
                            <div>
                                <label for="new-project-description" class="block text-xs font-medium text-dark-text-secondary">Description (Optional)</label>
                                <InputTextArea id="new-project-description" @bind-Value="@_newProject.Description" class="mt-1 w-full bg-dark-input border-dark-border rounded-md px-3 py-1.5 text-sm focus:ring-blue-500 focus:border-blue-500 resize-none" rows="2" placeholder="Brief project description" />
                            </div>
                            <button type="submit" class="w-full px-3 py-1.5 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark-panel focus:ring-blue-500">
                                <i data-lucide="plus-circle" class="inline-block w-4 h-4 mr-1"></i> Add Project
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        <EditForm Model="@_projectToEdit" OnValidSubmit="HandleUpdateProject" class="space-y-3 mb-4 p-3 border border-blue-500 rounded-md" Context="EditProjectForm">
                            <DataAnnotationsValidator />
                            <h4 class="text-md font-medium text-dark-text-primary mb-3">Edit Project: @_projectToEdit.Name</h4>
                            <div>
                                <label for="edit-project-name" class="block text-xs font-medium text-dark-text-secondary">Project Name</label>
                                <InputText id="edit-project-name" @bind-Value="@_projectToEdit.Name" class="mt-1 w-full bg-dark-input border-dark-border rounded-md px-3 py-1.5 text-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Project name" />
                                <ValidationMessage For="@(() => _projectToEdit.Name)" />
                            </div>
                            <div>
                                <label for="edit-project-description" class="block text-xs font-medium text-dark-text-secondary">Description (Optional)</label>
                                <InputTextArea id="edit-project-description" @bind-Value="@_projectToEdit.Description" class="mt-1 w-full bg-dark-input border-dark-border rounded-md px-3 py-1.5 text-sm focus:ring-blue-500 focus:border-blue-500 resize-none" rows="2" placeholder="Brief project description" />
                            </div>
                            <div>
                                <label for="edit-project-color" class="block text-xs font-medium text-dark-text-secondary">Color</label>
                                <InputText type="color" id="edit-project-color" @bind-Value="@_projectToEdit.Color" class="mt-1 w-full h-8 bg-dark-input border-dark-border rounded-md p-0.5 focus:ring-blue-500 focus:border-blue-500" />
                            </div>
                            <div class="flex space-x-2 mt-3">
                                <button type="button" @onclick="CancelEditProject" class="flex-1 px-3 py-1.5 bg-dark-accent text-dark-text-primary text-sm font-medium rounded-md hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark-panel focus:ring-dark-accent">
                                    Cancel
                                </button>
                                <button type="submit" class="flex-1 px-3 py-1.5 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark-panel focus:ring-blue-500">
                                    <i data-lucide="save" class="inline-block w-4 h-4 mr-1"></i> Save Changes
                                </button>
                            </div>
                        </EditForm>
                    }

                    <!-- Existing Projects List -->
                    @if (_projects != null && _projects.Any())
                    {
                        <h4 class="text-md font-medium text-dark-text-primary mt-6 mb-3">Existing Projects</h4>
                        <ul class="space-y-2 max-h-96 overflow-y-auto pr-2">
                            @foreach (var project in _projects.OrderByDescending(p => p.CreatedAt))
                            {
                                <li class="flex items-center justify-between p-3 bg-dark-input rounded-md hover:bg-dark-accent group cursor-pointer" @onclick="() => SelectProject(project)">
                                    <div class="flex items-center flex-grow min-w-0 mr-2">
                                        <span class="w-4 h-4 rounded-full mr-3 flex-shrink-0" style="background-color: @project.Color;"></span>
                                        <div class="flex flex-col min-w-0">
                                            <span class="text-sm font-semibold text-dark-text-primary truncate" title="@project.Name">@project.Name</span>
                                            @if (!string.IsNullOrWhiteSpace(project.Description))
                                            {
                                                <span class="text-xs text-dark-text-secondary italic truncate" title="@project.Description">
                                                    @TruncateString(project.Description, 50)
                                                </span>
                                            }
                                        </div>
                                    </div>
                                    <div class="flex-shrink-0 space-x-1">
                                        <button @onclick="() => HandleEditProjectClicked(project)" @onclick:stopPropagation="true" class="p-1.5 text-dark-text-secondary hover:text-blue-400 opacity-0 group-hover:opacity-100 transition-opacity rounded-md hover:bg-dark-panel" title="Edit Project">
                                            <i data-lucide="pencil" class="w-4 h-4"></i>
                                        </button>
                                        <button @onclick="() => HandleDeleteProjectClicked(project.Id)" @onclick:stopPropagation="true" class="p-1.5 text-dark-text-secondary hover:text-red-400 opacity-0 group-hover:opacity-100 transition-opacity rounded-md hover:bg-dark-panel" title="Delete Project">
                                            <i data-lucide="trash-2" class="w-4 h-4"></i>
                                        </button>
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                    else if (!_isLoadingProjects)
                    {
                        <p class="text-sm text-dark-text-secondary italic text-center py-4">No projects found. Add one to get started!</p>
                    }
                }
            </div>
        }
        else
        {
            <!-- Selected Project Task View -->
            <div class="pt-0">
                <div class="flex justify-start mb-4">
                    <button @onclick="ClearSelectedProject" class="px-3 py-1.5 bg-dark-accent text-dark-text-primary text-sm font-medium rounded-md hover:bg-opacity-80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark-panel focus:ring-dark-accent">
                        <i data-lucide="arrow-left" class="inline-block w-4 h-4 mr-1"></i> Back to Projects
                    </button>
                </div>
                
                <h3 class="text-md font-semibold text-dark-text-primary mb-3">Tasks for @(_selectedProject.Name)</h3>
                
                @if (_isLoadingProjectTasks)
                {
                    <p class="text-sm text-dark-text-secondary">Loading tasks for @(_selectedProject.Name)...</p>
                }
                else if (!string.IsNullOrEmpty(_projectTaskErrorMessage))
                {
                    <p class="text-sm text-red-500">Error: @_projectTaskErrorMessage</p>
                }
                else
                {
                    var taskIdeas = _selectedProjectTasks.Where(t => t.IsIdea).OrderByDescending(t => t.CreatedAt).ToList();
                    var activeProjectTasks = _selectedProjectTasks.Where(t => !t.IsIdea && !t.IsCompleted).OrderByDescending(t => t.Importance).ThenBy(t => t.CreatedAt).ToList();
                    var completedProjectTasks = _selectedProjectTasks.Where(t => !t.IsIdea && t.IsCompleted).OrderBy(t => t.CompletedAt).ToList();

                    <!-- Task Ideas Section -->
                    @if (taskIdeas.Any())
                    {
                        <h4 class="text-sm font-semibold text-dark-text-primary mt-4 mb-2">Task Ideas</h4>
                        <ul class="space-y-2 bg-dark-input p-3 rounded-md mb-4">
                            @foreach (var idea in taskIdeas)
                            {
                                <li class="flex items-center justify-between p-2 border-b border-dark-border last:border-b-0">
                                    <span class="text-sm text-dark-text-primary truncate flex-grow" title="@idea.Name">@idea.Name</span>
                                    <div class="flex-shrink-0 ml-2">
                                        <button @onclick="() => DevelopTaskIdea(idea)" class="px-2 py-1 text-xs bg-yellow-500 text-white rounded-md hover:bg-yellow-600 mr-1">
                                            Develop
                                        </button>
                                        <button @onclick="() => HandleDiscussIdeaWithAI(idea)" class="px-2 py-1 text-xs bg-sky-500 text-white rounded-md hover:bg-sky-600" title="Discuss with AI">
                                            <i data-lucide="message-circle" class="w-3 h-3"></i>
                                        </button>
                                    </div>
                                </li>
                            }
                        </ul>
                    }

                    <!-- Active Tasks Section -->
                    @if (activeProjectTasks.Any())
                    {
                        <h4 class="text-sm font-semibold text-dark-text-primary mt-4 mb-2">Active Tasks</h4>
                        <ul class="space-y-3 bg-dark-input p-3 rounded-md">
                            @foreach (var task in activeProjectTasks)
                            {
                                <li class="flex items-center justify-between p-2 border-b border-dark-border last:border-b-0">
                                    <div class="flex items-center space-x-3 flex-1 min-w-0">
                                        <input type="checkbox" class="form-checkbox h-4 w-4 flex-shrink-0"
                                               id="project-task-cb-@task.Id" checked="@task.IsCompleted" @onchange="async () => await ToggleProjectTaskCompletion(task)" @onclick:stopPropagation="true" />
                                        <label class="text-sm text-dark-text-primary truncate" title="@task.Name">
                                            @task.Name
                                        </label>
                                    </div>
                                    <div class="flex items-center space-x-2 flex-shrink-0">
                                        @if (task.DueDate.HasValue)
                                        {
                                            <span class="text-xs text-dark-text-tertiary" title="Due: @task.DueDate.Value.ToString("MMM dd, yyyy")">
                                                <i data-lucide="calendar" class="inline-block mr-1" style="width:12px; height:12px; vertical-align: -0.05em;"></i>@task.DueDate.Value.ToString("MMM dd")
                                            </span>
                                        }
                                        <span class="text-xs text-dark-text-tertiary" title="Importance: @task.Importance">
                                            <i data-lucide="bar-chart-2" class="inline-block mr-1" style="width:12px; height:12px; transform: rotate(90deg); vertical-align: -0.05em;"></i>@task.Importance
                                        </span>
                                    </div>
                                </li>
                            }
                        </ul>
                    }

                    <!-- Completed Tasks Section -->
                    @if (completedProjectTasks.Any())
                    {
                        <h4 class="text-sm font-semibold text-dark-text-primary mt-4 mb-2">Completed Tasks</h4>
                        <ul class="space-y-3 bg-dark-input p-3 rounded-md">
                            @foreach (var task in completedProjectTasks)
                            {
                                <li class="flex items-center justify-between p-2 border-b border-dark-border last:border-b-0">
                                    <div class="flex items-center space-x-3 flex-1 min-w-0">
                                        <input type="checkbox" class="form-checkbox h-4 w-4 flex-shrink-0"
                                               id="project-task-cb-@task.Id" checked="@task.IsCompleted" @onchange="async () => await ToggleProjectTaskCompletion(task)" @onclick:stopPropagation="true" />
                                        <label class="text-sm text-dark-text-secondary line-through truncate" title="@task.Name">
                                            @task.Name
                                        </label>
                                    </div>
                                     <span class="text-xs text-dark-text-tertiary" title="Completed: @task.CompletedAt?.ToString("MMM dd, yyyy")">
                                        <i data-lucide="check-circle-2" class="inline-block mr-1" style="width:12px; height:12px; vertical-align: -0.05em;"></i>@task.CompletedAt?.ToString("MMM dd")
                                    </span>
                                </li>
                            }
                        </ul>
                    }
                    
                    @if (!taskIdeas.Any() && !activeProjectTasks.Any() && !completedProjectTasks.Any())
                    {
                         <div class="bg-dark-input p-4 rounded-md text-center">
                            <p class="text-sm text-dark-text-secondary">No tasks or ideas found for this project yet.</p>
                        </div>
                    }
                }
                <!-- Add New Task to Project Button/Form -->
                 <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-3">
                    <button class="w-full px-3 py-2 bg-yellow-600 text-white text-sm font-medium rounded-md hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark-panel focus:ring-yellow-500" @onclick="HandleAddNewTaskIdeaToSelectedProject">
                        <i data-lucide="lightbulb" class="inline-block w-4 h-4 mr-1"></i> Add New Task Idea
                    </button>
                    <button class="w-full px-3 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-dark-panel focus:ring-blue-500" @onclick="OpenAddTaskModalForSelectedProject">
                        <i data-lucide="plus-circle" class="inline-block w-4 h-4 mr-1"></i> Add Developed Task
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<ProjectModel>? _projects;
    private ProjectModel _newProject = new();
    private ProjectModel? _projectToEdit;
    private bool _isLoadingProjects = true;
    private string? _errorMessage;
    private ProjectModel? _selectedProject;

    private List<TaskItemModel> _selectedProjectTasks = new();
    private bool _isLoadingProjectTasks = false;
    private string? _projectTaskErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProjectsAsync();

        // Check for a pending project ID from chat navigation
        if (NavStateService.PendingProjectIdToLoad.HasValue)
        {
            int projectIdToLoad = NavStateService.PendingProjectIdToLoad.Value;
            NavStateService.PendingProjectIdToLoad = null; // Clear it immediately

            var projectToSelect = _projects?.FirstOrDefault(p => p.Id == projectIdToLoad);
            if (projectToSelect != null)
            {
                Logger.LogInformation($"Pending project ID {projectIdToLoad} found, selecting project: {projectToSelect.Name}");
                await SelectProject(projectToSelect); // Select the project
            }
            else
            {
                Logger.LogWarning($"Pending project ID {projectIdToLoad} found, but project not in the loaded list. User might need to refresh or project was deleted.");
                _errorMessage = $"Could not automatically select the newly created project (ID: {projectIdToLoad}). It might have been deleted or an error occurred. Please select it from the list or refresh.";
            }
        }
        TaskModalService.OnStandardTaskSaved += HandleStandardTaskSaved_ProjectPlanning;
        TaskModalService.OnTaskIdeasBatchSaved += HandleTaskIdeasBatchSaved_ProjectPlanning; // Subscribe here
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Always call createLucideIcons as the displayed icons might change
        // based on _selectedProject or other state changes.
        await JSRuntime.InvokeVoidAsync("appInterop.createLucideIcons");
    }

    private async Task LoadProjectsAsync()
    {
        _isLoadingProjects = true;
        _errorMessage = null;
        _projectToEdit = null;
        try
        {
            _projects = await ProjectService.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading projects: {ex.Message}";
        }
        finally
        {
            _isLoadingProjects = false;
            StateHasChanged();
        }
    }

    private async Task HandleAddProject()
    {
        if (string.IsNullOrWhiteSpace(_newProject.Name)) return;

        var createdProject = await ProjectService.CreateProjectAsync(_newProject);
        if (createdProject != null)
        {
            _newProject = new ProjectModel(); 
            await LoadProjectsAsync(); 
        }
        else
        {
            _errorMessage = "Failed to create project.";
            StateHasChanged();
        }
    }

    private void HandleEditProjectClicked(ProjectModel project)
    {
        _projectToEdit = new ProjectModel
        {
            Id = project.Id,
            Name = project.Name,
            Description = project.Description,
            Color = project.Color,
            CreatedAt = project.CreatedAt
        };
        _newProject = new ProjectModel(); 
        _selectedProject = null; // Ensure we are in project list view
        StateHasChanged();
    }

    private async Task HandleUpdateProject()
    {
        if (_projectToEdit == null || string.IsNullOrWhiteSpace(_projectToEdit.Name)) return;

        var success = await ProjectService.UpdateProjectAsync(_projectToEdit.Id, _projectToEdit);
        if (success)
        {
            _projectToEdit = null; 
            await LoadProjectsAsync(); 
        }
        else
        {
            _errorMessage = "Failed to update project.";
            StateHasChanged();
        }
    }

    private void CancelEditProject()
    {
        _projectToEdit = null;
        StateHasChanged();
    }

    private async Task HandleDeleteProjectClicked(int projectId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this project and all its associated tasks?");
        if (confirmed)
        {
            var success = await ProjectService.DeleteProjectAsync(projectId);
            if (success)
            {
                if (_selectedProject?.Id == projectId) _selectedProject = null; // Deselect if current project is deleted
                if (_projectToEdit?.Id == projectId) _projectToEdit = null; // Cancel edit if current project is deleted
                await LoadProjectsAsync();
            }
            else
            {
                _errorMessage = "Failed to delete project.";
                StateHasChanged();
            }
        }
    }
    
    private async Task SelectProject(ProjectModel project)
    {
        _selectedProject = project;
        _projectToEdit = null; // Ensure edit form is hidden
        _newProject = new(); // Reset new project form
        Logger.LogInformation($"Project selected: {project.Name} (ID: {project.Id})");
        await LoadSelectedProjectTasksAsync();
        StateHasChanged(); // Ensure UI updates to show project tasks
    }

    private async Task LoadSelectedProjectTasksAsync()
    {
        if (_selectedProject == null) return;

        _isLoadingProjectTasks = true;
        _projectTaskErrorMessage = null;
        StateHasChanged(); 
        try
        {
            var allTasks = await TaskService.GetTasksAsync(includeCompleted: true);
            _selectedProjectTasks = allTasks?.Where(t => t.ProjectId == _selectedProject.Id).ToList() ?? new List<TaskItemModel>();
            
            // Updated logging to be safer with null checks for counts
            int totalCount = _selectedProjectTasks?.Count ?? 0;
            int ideaCount = _selectedProjectTasks?.Count(t => t.IsIdea) ?? 0;
            int activeCount = _selectedProjectTasks?.Count(t => !t.IsIdea && !t.IsCompleted) ?? 0;
            int completedCount = _selectedProjectTasks?.Count(t => t.IsCompleted) ?? 0;
            Logger.LogInformation($"Loaded {totalCount} tasks for project '{_selectedProject.Name}'. Found {ideaCount} ideas, {activeCount} active, {completedCount} completed.");
        }
        catch (Exception ex)
        {
            _projectTaskErrorMessage = $"Failed to load tasks: {ex.Message}";
            Logger.LogError(ex, $"Error loading tasks for project '{_selectedProject.Name}'.");
        }
        finally
        {
            _isLoadingProjectTasks = false;
            StateHasChanged(); // Update UI with tasks or error message
        }
    }

    private void ClearSelectedProject()
    {
        _selectedProject = null;
        _errorMessage = null;
        _projectTaskErrorMessage = null;
        _selectedProjectTasks.Clear();
        StateHasChanged();
    }

    private async Task ToggleProjectTaskCompletion(TaskItemModel task)
    {
        task.IsCompleted = !task.IsCompleted;
        task.CompletedAt = task.IsCompleted ? DateTime.UtcNow : null;
        var success = await TaskService.UpdateTaskAsync(task.Id, task);
        if (!success)
        {
            task.IsCompleted = !task.IsCompleted; // Revert on failure
            task.CompletedAt = task.IsCompleted ? DateTime.UtcNow : null;
            // Optionally show an error message to the user
        }
        StateHasChanged(); // Re-render the task list
    }

    private void OpenAddTaskModalForSelectedProject()
    {
        if (_selectedProject != null)
        {
            var newTask = new TaskItemModel { ProjectId = _selectedProject.Id, IsIdea = false }; // Ensure IsIdea is false
            TaskModalService.RequestOpenStandardModal(newTask); 
        }
    }

    private async Task HandleAddNewTaskIdeaToSelectedProject()
    {
        if (_selectedProject == null) return;

        var ideaName = await JSRuntime.InvokeAsync<string>("prompt", "Enter a name for the new task idea:");
        if (string.IsNullOrWhiteSpace(ideaName))
        {
            return; // User cancelled or entered nothing
        }

        var newIdea = new TaskItemModel
        {
            Name = ideaName,
            ProjectId = _selectedProject.Id,
            IsIdea = true,
            Importance = 50 // Default importance, can be adjusted
        };

        Console.WriteLine($"[ProjectPlanningView] Creating new task idea. Name: {newIdea.Name}, IsIdea: {newIdea.IsIdea}, ProjectId: {newIdea.ProjectId}");

        var createdIdea = await TaskService.CreateTaskAsync(newIdea);
        if (createdIdea != null)
        {
            Console.WriteLine($"[ProjectPlanningView] Successfully created idea. Received ID: {createdIdea.Id}, Name: {createdIdea.Name}, IsIdea: {createdIdea.IsIdea}, ProjectId: {createdIdea.ProjectId}");
            await SelectProject(_selectedProject);
        }
        else
        {
            Console.WriteLine("[ProjectPlanningView] Failed to create task idea (service returned null).");
            _projectTaskErrorMessage = "Failed to create the task idea. Please try again.";
            StateHasChanged(); // To show the error message
        }
    }

    private async Task HandleStandardTaskSaved_ProjectPlanning(TaskItemModel savedTask)
    {
        if (_selectedProject != null && savedTask.ProjectId == _selectedProject.Id)
        {
            Logger.LogInformation($"Task '{savedTask.Name}' saved, refreshing tasks for project '{_selectedProject.Name}'. IsIdea: {savedTask.IsIdea}");
            await LoadSelectedProjectTasksAsync(); 
        }
        else if (_selectedProject == null)
        {
             Logger.LogInformation($"Task '{savedTask.Name}' saved, but no project is currently selected in ProjectPlanningView. No UI refresh needed here.");
        }
        else
        {
            Logger.LogInformation($"Task '{savedTask.Name}' saved for project ID {savedTask.ProjectId}, but current project is '{_selectedProject.Name}' (ID: {_selectedProject.Id}). No UI refresh needed here.");
        }
    }

    private async Task HandleTaskIdeasBatchSaved_ProjectPlanning(int projectId)
    {
        if (_selectedProject != null && projectId == _selectedProject.Id)
        {
            Logger.LogInformation($"Batch task ideas saved for project ID {projectId}. Refreshing tasks for current project '{_selectedProject.Name}'.");
            await LoadSelectedProjectTasksAsync();
        }
        else
        {
            Logger.LogInformation($"Batch task ideas saved for project ID {projectId}, but current project is different or none selected. No UI refresh needed here.");
        }
    }

    public async ValueTask DisposeAsync()
    {
        TaskModalService.OnStandardTaskSaved -= HandleStandardTaskSaved_ProjectPlanning;
        TaskModalService.OnTaskIdeasBatchSaved -= HandleTaskIdeasBatchSaved_ProjectPlanning; // Unsubscribe here
        await ValueTask.CompletedTask; 
    }

    private string TruncateString(string? value, int maxLength)
    {
        if (string.IsNullOrEmpty(value)) return string.Empty;
        return value.Length <= maxLength ? value : value.Substring(0, maxLength) + "...";
    }

    private void DevelopTaskIdea(TaskItemModel idea)
    {
        Logger.LogInformation($"DevelopTaskIdea called for: {idea.Name}");
        TaskModalService.RequestOpenStandardModal(idea); 
    }

    private void HandleDiscussIdeaWithAI(TaskItemModel idea)
    {
        Logger.LogInformation($"HandleDiscussIdeaWithAI called for: {idea.Name} (ID: {idea.Id})");
        NavStateService.IdeaToDiscuss = idea;
        // NavigationManager.NavigateTo("/"); // Removed to stay on ProjectPlanningView
        // User will manually navigate or focus chat if needed.
        // The ChatPanel will pick up the IdeaToDiscuss from NavStateService on its next parameter set or initialization.
        StateHasChanged(); // Optional: ensure UI reflects any state changes if necessary, though ChatPanel handles its own update.
    }
} 